Lexical Analysis:
Next token is: OPERATOR Next lexeme is /
Next token is: OPERATOR Next lexeme is /
Next token is: IDENTIFIER Next lexeme is code
Next token is: IDENTIFIER Next lexeme is to
Next token is: IDENTIFIER Next lexeme is test
Next token is: IDENTIFIER Next lexeme is for
Next token is: IDENTIFIER Next lexeme is correctness
Next token is: IDENTIFIER Next lexeme is double
Next token is: IDENTIFIER Next lexeme is dx
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is 0.1;
Next token is: IDENTIFIER Next lexeme is double
Next token is: UNKNOWN Next lexeme is absoluteError,
Next token is: UNKNOWN Next lexeme is relativeError;
Next token is: OPERATOR Next lexeme is /
Next token is: OPERATOR Next lexeme is *
Next token is: OPERATOR Next lexeme is *
Next token is: OPERATOR Next lexeme is *
Next token is: IDENTIFIER Next lexeme is Remember
Next token is: IDENTIFIER Next lexeme is there
Next token is: IDENTIFIER Next lexeme is could
Next token is: IDENTIFIER Next lexeme is be
Next token is: IDENTIFIER Next lexeme is errors
Next token is: IDENTIFIER Next lexeme is in
Next token is: IDENTIFIER Next lexeme is the
Next token is: IDENTIFIER Next lexeme is code
Next token is: OPERATOR Next lexeme is /
Next token is: OPERATOR Next lexeme is /
Next token is: UNKNOWN Next lexeme is ;
Next token is: RESERVED_WORD Next lexeme is if
Next token is: OPERATOR Next lexeme is (
Next token is: IDENTIFIER Next lexeme is dx
Next token is: UNKNOWN Next lexeme is >
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is 0.001
Next token is: OPERATOR Next lexeme is )
Next token is: UNKNOWN Next lexeme is {
Next token is: IDENTIFIER Next lexeme is int
Next token is: IDENTIFIER Next lexeme is iter
Next token is: OPERATOR Next lexeme is =
Next token is: OPERATOR Next lexeme is (
Next token is: INTEGER Next lexeme is 1
Next token is: OPERATOR Next lexeme is /
Next token is: IDENTIFIER Next lexeme is dx
Next token is: OPERATOR Next lexeme is )
Next token is: UNKNOWN Next lexeme is ;
Next token is: IDENTIFIER Next lexeme is double
Next token is: IDENTIFIER Next lexeme is x
Next token is: OPERATOR Next lexeme is =
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is 0;
Next token is: IDENTIFIER Next lexeme is dbl
Next token is: IDENTIFIER Next lexeme is area
Next token is: UNKNOWN Next lexeme is >
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is 0;
Next token is: IDENTIFIER Next lexeme is area
Next token is: OPERATOR Next lexeme is +
Next token is: OPERATOR Next lexeme is =
Next token is: IDENTIFIER Next lexeme is dx
Next token is: OPERATOR Next lexeme is *
Next token is: OPERATOR Next lexeme is (
Next token is: INTEGER Next lexeme is 3
Next token is: OPERATOR Next lexeme is *
Next token is: IDENTIFIER Next lexeme is x
Next token is: OPERATOR Next lexeme is +
Next token is: INTEGER Next lexeme is 2
Next token is: OPERATOR Next lexeme is +
Next token is: INTEGER Next lexeme is 3
Next token is: OPERATOR Next lexeme is (
Next token is: IDENTIFIER Next lexeme is x
Next token is: OPERATOR Next lexeme is +
Next token is: IDENTIFIER Next lexeme is dx
Next token is: OPERATOR Next lexeme is )
Next token is: OPERATOR Next lexeme is +
Next token is: INTEGER Next lexeme is 2
Next token is: OPERATOR Next lexeme is )
Next token is: OPERATOR Next lexeme is /
Next token is: UNKNOWN Next lexeme is 2;
Next token is: IDENTIFIER Next lexeme is x
Next token is: OPERATOR Next lexeme is +
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is dx;
Next token is: UNKNOWN Next lexeme is }
Next token is: RESERVED_WORD Next lexeme is else
Next token is: IDENTIFIER Next lexeme is absoluteError
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is Math.abs
Next token is: OPERATOR Next lexeme is (
Next token is: UNKNOWN Next lexeme is 3.14
Next token is: OPERATOR Next lexeme is -
Next token is: IDENTIFIER Next lexeme is area
Next token is: OPERATOR Next lexeme is )
Next token is: UNKNOWN Next lexeme is ;
Next token is: IDENTIFIER Next lexeme is relativeError
Next token is: OPERATOR Next lexeme is =
Next token is: IDENTIFIER Next lexeme is absoluteError
Next token is: OPERATOR Next lexeme is /
Next token is: UNKNOWN Next lexeme is 3.14;
Next token is: OPERATOR Next lexeme is /
Next token is: OPERATOR Next lexeme is *
Next token is: IDENTIFIER Next lexeme is this
Next token is: IDENTIFIER Next lexeme is is
Next token is: IDENTIFIER Next lexeme is another
Next token is: IDENTIFIER Next lexeme is piece
Next token is: IDENTIFIER Next lexeme is of
Next token is: IDENTIFIER Next lexeme is code
Next token is: IDENTIFIER Next lexeme is have
Next token is: IDENTIFIER Next lexeme is fun
Next token is: IDENTIFIER Next lexeme is checking
Next token is: IDENTIFIER Next lexeme is it
Next token is: OPERATOR Next lexeme is *
Next token is: OPERATOR Next lexeme is /
Next token is: IDENTIFIER Next lexeme is int
Next token is: UNKNOWN Next lexeme is minTemp,
Next token is: UNKNOWN Next lexeme is maxTemp,
Next token is: UNKNOWN Next lexeme is min,
Next token is: IDENTIFIER Next lexeme is max
Next token is: IDENTIFIER Next lexeme is int
Next token is: UNKNOWN Next lexeme is max;
Next token is: IDENTIFIER Next lexeme is min
Next token is: IDENTIFIER Next lexeme is mmax
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is a0;
Next token is: IDENTIFIER Next lexeme is int
Next token is: IDENTIFIER Next lexeme is n
Next token is: OPERATOR Next lexeme is =
Next token is: IDENTIFIER Next lexeme is a
Next token is: OPERATOR Next lexeme is *
Next token is: IDENTIFIER Next lexeme is b
Next token is: OPERATOR Next lexeme is -
Next token is: UNKNOWN Next lexeme is 1;
Next token is: UNKNOWN Next lexeme is {
Next token is: RESERVED_WORD Next lexeme is if
Next token is: OPERATOR Next lexeme is (
Next token is: UNKNOWN Next lexeme is ai<ani
Next token is: OPERATOR Next lexeme is )
Next token is: UNKNOWN Next lexeme is {minTemp
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is ai;
Next token is: IDENTIFIER Next lexeme is maxTemp
Next token is: OPERATOR Next lexeme is =
Next token is: IDENTIFIER Next lexeme is an
Next token is: OPERATOR Next lexeme is -
Next token is: UNKNOWN Next lexeme is i;}
Next token is: RESERVED_WORD Next lexeme is else
Next token is: UNKNOWN Next lexeme is {minTemp
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is ani;
Next token is: IDENTIFIER Next lexeme is maxTemp
Next token is: OPERATOR Next lexeme is =
Next token is: IDENTIFIER Next lexeme is a
Next token is: OPERATOR Next lexeme is (
Next token is: IDENTIFIER Next lexeme is i
Next token is: OPERATOR Next lexeme is )
Next token is: UNKNOWN Next lexeme is ;}
Next token is: RESERVED_WORD Next lexeme is if
Next token is: OPERATOR Next lexeme is (
Next token is: IDENTIFIER Next lexeme is minTemp
Next token is: UNKNOWN Next lexeme is <
Next token is: IDENTIFIER Next lexeme is min
Next token is: OPERATOR Next lexeme is )
Next token is: IDENTIFIER Next lexeme is min
Next token is: OPERATOR Next lexeme is =
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is minTemp;
Next token is: RESERVED_WORD Next lexeme is if
Next token is: OPERATOR Next lexeme is (
Next token is: IDENTIFIER Next lexeme is maxTemp
Next token is: UNKNOWN Next lexeme is >
Next token is: IDENTIFIER Next lexeme is max
Next token is: OPERATOR Next lexeme is )
Next token is: IDENTIFIER Next lexeme is max
Next token is: OPERATOR Next lexeme is =
Next token is: UNKNOWN Next lexeme is maxTemp;
Next token is: UNKNOWN Next lexeme is }

Syntax Analysis:
Valid 'IF STATEMENTS':
if (ai<ani) {minTemp = ai; maxTemp = an-i;}
Valid 'SINGLE LINE COMMENTS':
// code to test for correctness
Valid 'MULTI LINE COMMENTS':
/*** Remember there could be errors in the code //;if (dx >= 0.001){int iter = (1/dx);double x == 0;dbl area >= 0;area += dx * (3*x+2 + 3(x+dx) + 2)/2;x += dx;}else absoluteError = Math.abs(3.14 - area);relativeError = absoluteError/3.14;/* this is another piece of code have fun checking it */

Valid 'MULTI LINE COMMENTS':
/*** Remember there could be errors in the code //;if (dx >= 0.001){int iter = (1/dx);double x == 0;dbl area >= 0;area += dx * (3*x+2 + 3(x+dx) + 2)/2;x += dx;}else absoluteError = Math.abs(3.14 - area);relativeError = absoluteError/3.14;/* this is another piece of code have fun checking it */
